'use strict';var _slicedToArray=function(){function a(b,c){var d=[],e=!0,f=!1,g=void 0;try{for(var j,h=b[Symbol.iterator]();!(e=(j=h.next()).done)&&(d.push(j.value),!(c&&d.length===c));e=!0);}catch(k){f=!0,g=k}finally{try{!e&&h['return']&&h['return']()}finally{if(f)throw g}}return d}return function(b,c){if(Array.isArray(b))return b;if(Symbol.iterator in Object(b))return a(b,c);throw new TypeError('Invalid attempt to destructure non-iterable instance')}}(),START_TAG=/^\[([a-z]+)(?:=([^[]+))?\]/i,END_TAG=/^\[\/([a-z]+)\]/i;function collectText(a){return 1>a.length?'':a.match(START_TAG)||a.match(END_TAG)?'':a[0]+collectText(a.slice(1))}function matchStartTag(a){var b=a.match(START_TAG)||[],c=_slicedToArray(b,3),d=c[0],e=c[1],f=c[2],g=f===void 0?null:f;if(d)return{type:'start-tag',text:d,tag:e.toLowerCase(),param:g}}function matchEndTag(a){var b=a.match(END_TAG)||[],c=_slicedToArray(b,2),d=c[0],e=c[1];if(d)return{type:'end-tag',text:d,tag:e.toLowerCase()}}function matchText(a){var b=collectText(a);return{type:'text',text:b}}function tokenize(a){if(1>a.length)return[];var b=matchStartTag(a)||matchEndTag(a)||matchText(a);return[b].concat(tokenize(a.slice(b.text.length)))}function createTree(a){function b(f){var g=a[f.position];if('text'===g.type||'end-tag'===g.type)return f.position++,{type:'text',text:g.text}}function c(f){var g=a[f.position];if('start-tag'===g.type){var h={type:'tag-pair',tag:g.tag,param:g.param,children:[]};for(g=a[++f.position];f.position<a.length&&'end-tag'!==g.type&&g.tag!==h.tag;)h.children.push(d(f)),g=a[f.position];return f.position++,h}}function d(f){return f.position>=a.length?void 0:b(f)||c(f)}for(var e={position:0,tree:[]};e.position<a.length;)e.tree.push(d(e));return e.tree}function parse(a){return createTree(a)}function defaultRenderer(a,b,c){return null==c?'['+b+']'+a+'[/'+b+']':'['+b+'='+c+']'+a+'[/'+b+']'}function renderNode(a,b){if('text'===a.type)return a.text;if('tag-pair'===a.type){var c=a.children.map(renderNode).join(''),d=b[a.tag]||defaultRenderer;return d(c,a.tag,a.param)}}function parseBBC(a){return parse(tokenize(a))}function renderBBC(a){var b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:{};return parseBBC(a).map(function(c){return renderNode(c,b)}).join('')}var tags={common:{b:function b(a){return'<strong>'+a+'</strong>'},i:function i(a){return'<em>'+a+'</em>'},u:function u(a){return'<u>'+a+'</u>'},img:function img(a){return'<img src="'+a+'">'},sup:function sup(a){return'<sup>'+a+'</sup>'},sub:function sub(a){return'<sub>'+a+'</sub>'},big:function big(a){return'<big>'+a+'</big>'},small:function small(a){return'<small>'+a+'</small>'}}};module.exports={tokenize:tokenize,parseBBC:parseBBC,renderBBC:renderBBC,tags:tags};

//# sourceMappingURL=bbc.min.js.map