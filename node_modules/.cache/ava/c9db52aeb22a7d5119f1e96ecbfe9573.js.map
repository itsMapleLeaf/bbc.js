{"version":3,"sources":["test.js"],"names":["test","require","bbc","t","deepEqual","tokenize","type","text","tag","param","parseBBC","children","is","renderBBC","tags","common"],"mappings":"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","file":"test.js","sourcesContent":["const test = require('ava')\nconst bbc = require('./index')\n\ntest('matching tags', t => {\n  t.deepEqual(bbc.tokenize(`[b]hello[/b] [i]world[/i] foobar`), [\n    {type: 'start-tag', text: '[b]', tag: 'b', param: null},\n    {type: 'text', text: 'hello'},\n    {type: 'end-tag', text: '[/b]', tag: 'b'},\n    {type: 'text', text: ' '},\n    {type: 'start-tag', text: '[i]', tag: 'i', param: null},\n    {type: 'text', text: 'world'},\n    {type: 'end-tag', text: '[/i]', tag: 'i'},\n    {type: 'text', text: ' foobar'},\n  ])\n})\n\ntest('matching tag params', t => {\n  t.deepEqual(bbc.tokenize('[color=red]i am red[/color]'), [\n    {type: 'start-tag', text: '[color=red]', tag: 'color', param: 'red'},\n    {type: 'text', text: 'i am red'},\n    {type: 'end-tag', text: '[/color]', tag: 'color'},\n  ])\n})\n\ntest('parsing a single text node', t => {\n  t.deepEqual(bbc.parseBBC('foo bar'), [{type: 'text', text: 'foo bar'}])\n})\n\ntest('parsing unmatched end tags as text', t => {\n  t.deepEqual(bbc.parseBBC('[/foo][/bar]'), [\n    {type: 'text', text: '[/foo]'},\n    {type: 'text', text: '[/bar]'},\n  ])\n  t.deepEqual(bbc.parseBBC('[/foo] test [/bar]'), [\n    {type: 'text', text: '[/foo]'},\n    {type: 'text', text: ' test '},\n    {type: 'text', text: '[/bar]'},\n  ])\n})\n\ntest('parsing flat tag pairs', t => {\n  t.deepEqual(bbc.parseBBC('[b]foo[/b] [color=red]bar[/color]'), [\n    {\n      type: 'tag-pair',\n      tag: 'b',\n      param: null,\n      children: [{type: 'text', text: 'foo'}],\n    },\n    {\n      type: 'text',\n      text: ' ',\n    },\n    {\n      type: 'tag-pair',\n      tag: 'color',\n      param: 'red',\n      children: [{type: 'text', text: 'bar'}],\n    },\n  ])\n})\n\ntest('parsing nesty tag pairs', t => {\n  t.deepEqual(bbc.parseBBC('[foo][bar]test[/bar][/foo]'), [\n    {\n      type: 'tag-pair',\n      tag: 'foo',\n      param: null,\n      children: [\n        {\n          type: 'tag-pair',\n          tag: 'bar',\n          param: null,\n          children: [{type: 'text', text: 'test'}],\n        },\n      ],\n    },\n  ])\n})\n\ntest('parsing unclosed tags', t => {\n  t.deepEqual(bbc.parseBBC('[foo][bar]test'), [\n    {\n      type: 'tag-pair',\n      tag: 'foo',\n      param: null,\n      children: [\n        {\n          type: 'tag-pair',\n          tag: 'bar',\n          param: null,\n          children: [{type: 'text', text: 'test'}],\n        },\n      ],\n    },\n  ])\n})\n\ntest('unconfigured rendering', t => {\n  t.is(bbc.renderBBC('[b]foo[/b] [i]bar[/i]'), '[b]foo[/b] [i]bar[/i]')\n})\n\ntest('configured rendering', t => {\n  t.is(\n    bbc.renderBBC('[b]foo[/b] [i]bar[/i]', bbc.tags.common),\n    '<strong>foo</strong> <em>bar</em>'\n  )\n})\n"]}