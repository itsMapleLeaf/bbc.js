'use strict';

const test = require('ava');
const bbc = require('./index');

test('tokenizing', t => {
  t.deepEqual(bbc.tokenize(`[b]hello[/b] [i]world[/i] foobar`), [{ type: 'start-tag', text: '[b]', tag: 'b', param: null }, { type: 'text', text: 'hello' }, { type: 'end-tag', text: '[/b]', tag: 'b' }, { type: 'text', text: ' ' }, { type: 'start-tag', text: '[i]', tag: 'i', param: null }, { type: 'text', text: 'world' }, { type: 'end-tag', text: '[/i]', tag: 'i' }, { type: 'text', text: ' foobar' }]);
});

test('parsing a single text node', t => {
  t.deepEqual(bbc.parseText('foo bar'), [{ type: 'text', text: 'foo bar' }]);
});

test('parsing unmatched end tags', t => {
  t.deepEqual(bbc.parseText('[/foo] [/bar]'), [{ type: 'text', text: '[/foo]' }, { type: 'text', text: '[/bar]' }]);
});

test('parsing a tag pair', t => {
  t.pass('todo');
});

test('parsing', t => {
  t.pass('todo');
  // t.deepEqual(bbc.parse(bbc.tokenize('foo bar')), [
  //   {
  //     type: 'tag-pair',
  //     tag: 'b',
  //     param: null,
  //     children: [{type: 'text', text: 'test'}],
  //   },
  // ])
});
//# sourceMappingURL=node_modules/.cache/ava/88676d4ad29137dffe3b6147f5af3fa0.js.map